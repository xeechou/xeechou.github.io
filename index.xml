<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Insaturé</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Insaturé</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Aug 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Event bus implementation</title>
      <link>http://localhost:1313/posts/ebus/</link>
      <pubDate>Sun, 11 Aug 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/ebus/</guid>
      <description>Recently I open sourced a small C++ library called eBus(Event Bus), it came along separated from another project I was working on. The idea, or should I say the interface was not very original, I took the inspiration from a much more complicated Event Buses In O3DE. The goal is simple, providing an easy to use Observer pattern so your can decouple the code from the callers to its callees.</description>
    </item>
    <item>
      <title>Modular Vulkan feature and extension manager</title>
      <link>http://localhost:1313/posts/modular-vulkan-feature-manager/</link>
      <pubDate>Wed, 12 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/modular-vulkan-feature-manager/</guid>
      <description>Recently I&amp;#39;ve been trying to squeeze a few hours at a time from my weekends to work on my Vulkan renderer projects. Because the extremely limited time I have, any feature I want need to planned well and get implemented in a few hours or I need to break it down to do so. One of such feature I&amp;#39;ve want to implement is a modular Vulkan Feature management.&#xA;Root Issue: hard-coding enabled features When creating an Vulkan device, you have a lot of options which extensions you want to enable, which feature you want to enable.</description>
    </item>
    <item>
      <title>Moving  to literate Emacs configuration.</title>
      <link>http://localhost:1313/posts/emacs-literate-config/</link>
      <pubDate>Fri, 08 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/emacs-literate-config/</guid>
      <description>For a long time, I have been maintaining my emacs configuration through a folder of elisp files. I am quite happy about it and even have it working pretty well on Windows (unfortunately it&amp;#39;s my work environment) with help my 3rdparty binaries repository. Finally I decided to move to literate configuration. It&amp;#39;s a thing I wanted to do for a long time. Not because it&amp;#39;s THE COOL things to do.</description>
    </item>
    <item>
      <title>My Vanilla yet powerful Emacs environment</title>
      <link>http://localhost:1313/emacs-config/</link>
      <pubDate>Fri, 08 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/emacs-config/</guid>
      <description>Introduction For years I have been perfecting my Emacs configuration, it is now the essential part of my digital life. This is my personal configuration but you may also find it useful to your needs. Feel free to grab some of my config snippets to work for you.&#xA;Here is a list of incomplete features you get from this config set:&#xA;Clean configuration with use-package Many programming language support: C/C++, Python, typescript, golang, glsl and many others.</description>
    </item>
    <item>
      <title>Comparing Vulkan and D3D12</title>
      <link>http://localhost:1313/posts/vulkan-vs-d3d12/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/vulkan-vs-d3d12/</guid>
      <description>Recently I wrote the PetitD3D12 to extend my graphics API knowledge to the land of DirectX, well I am surprised to see how similar those modern graphics APIs are. More precisely I think Vulkan is trying to stay close to D3D12 these days for be able to easily translate it. However there are also some noticeable differences, surprisingly I did not find too much &amp;ldquo;real&amp;rdquo; API comparison info, the Alain Galvan&amp;rsquo;s blog post are more just about grouping those API data structures together, not much you will know the difference in using them.</description>
    </item>
    <item>
      <title>Wayland client side window decorations through libdecor</title>
      <link>http://localhost:1313/posts/libdecor/</link>
      <pubDate>Thu, 17 Aug 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/libdecor/</guid>
      <description>I have been away from wayland system for a while because of work, but I still remember back in the day the pain to manage the window frame (as known as decorations) in wayland system. Surprisingly quite a lot of server work shifted to client side to manage, eg, you need to implement key repeat event in the client applications.&#xA;There are two ways right now to do the client decorations.</description>
    </item>
    <item>
      <title>Moving towards GPU driven</title>
      <link>http://localhost:1313/posts/moving-to-gpu-driven/</link>
      <pubDate>Sat, 13 May 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/moving-to-gpu-driven/</guid>
      <description>We were using a traditional for_each style drawing G-buffer and shadow in Vulkan, with over 2.5 million triangles, and 25,000+ objects, I started to see my GTX 1650 having hard time following it up. Although you can pre-record command buffers in Vulkan to reduce the CPU time but we will also end up with a very large command buffer to submit and potentially miss the driver optimizations with indirect draws. These days, GPUs are getting more and more powerful and complex, including tons of new features.</description>
    </item>
    <item>
      <title>Comparing Vulkan Frameworks</title>
      <link>http://localhost:1313/posts/vulkan-frameworks/</link>
      <pubDate>Sun, 29 Jan 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/vulkan-frameworks/</guid>
      <description>There are indeed many people tried to implement a rendering framework on top of Vulkan to reduce the amount of code to write. But so many of them merely just create a wrapper around existing Vulkan objects, like wrapping the command buffer with a vk::CommandBuffer::Ptr and you still have to fill all the VkObjCreateInfos .&#xA;The rendering framework focus on the render passes should provide a compact yet descriptive API to create render pass.</description>
    </item>
    <item>
      <title>Moving to Hugo, Aftermath</title>
      <link>http://localhost:1313/posts/moving-to-hugo-ii/</link>
      <pubDate>Tue, 23 Nov 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/moving-to-hugo-ii/</guid>
      <description>My blog is now back online, with brand new render engine Hugo. The URLs are totally different though. Not sure how web crawlers handling it right now.&#xA;After the migration, I did a few extra work for patching the hiccups. Fix the build warnings and adding new features.&#xA;The about page In every blog you always have some pages that you do not want it be inside the blog list. By default Hugo will simply place everything on the &amp;ldquo;navigation list&amp;rdquo;.</description>
    </item>
    <item>
      <title>Moving to Hugo</title>
      <link>http://localhost:1313/posts/moving-to-hugo/</link>
      <pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/moving-to-hugo/</guid>
      <description>For a long time I&amp;rsquo;ve been wanting to Migrate my blog system from Pelican to Hugo. One reason is that I had enough with python virtual environment breaks every 3 months. Another motivation is obviously I would like to replace Python with Go in my life.&#xA;A long time ago I followed Go tutorial for getting started, surprised by its syntax tidiness and similarity to Python, and it is way faster.</description>
    </item>
    <item>
      <title>Belief or Cult</title>
      <link>http://localhost:1313/posts/belief-or-cult/</link>
      <pubDate>Sun, 31 Oct 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/belief-or-cult/</guid>
      <description>It&amp;rsquo;s been a while that I haven&amp;rsquo;t update the blogs. It is so easy to slack off on good habits. &amp;ldquo;Oh I will continue once I finish A B C&amp;rdquo;. We are all busy as hell, in the software world, you WORK, you WORK and you GO TO SLEEP. Like this one, I am always hoping to switch to Hugo, then I can continue writing the blog. The thing is, I never got the good weekend to do the switching.</description>
    </item>
    <item>
      <title>July 2021 Status Update</title>
      <link>http://localhost:1313/posts/june-2021/</link>
      <pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/june-2021/</guid>
      <description>I am now back in Canada, quarantined again. There is much of internal struggle whether I should move back or stay in Shanghai? Working for tech company in Shanghai or many cities in China would be like endless crunching. Maybe I was not used to this high-paced lifestyle, long working hours. Didn&amp;rsquo;t like javascript either. It is a pity that I didn&amp;rsquo;t find a nicer job maybe opens to better opportunities.</description>
    </item>
    <item>
      <title>Scalable org file synchronization solution</title>
      <link>http://localhost:1313/posts/org-sync-ii/</link>
      <pubDate>Fri, 21 May 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/org-sync-ii/</guid>
      <description>In my previous post, I&amp;rsquo;ve somewhat found a way to synchronize my org files. I was pretty happy, I was having just around six org pages, coping them to a webdav server was not a huge hustle :P, util I started to use org-roam. Suddenly I have to create org file for every new zettle, the performance quickly started to tank. This is probably the beauty and curse of using open source solutions &amp;mdash; you have full control of your work and you have to solve problems you created yourself.</description>
    </item>
    <item>
      <title>The sphinx website for your project</title>
      <link>http://localhost:1313/posts/sphinx-website/</link>
      <pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/sphinx-website/</guid>
      <description>Static site generator, I love and hate them at the sametime. They really render your markdowns into a beautiful website without need of knowing web technologies. Then there are the constant hustles once you try to customize it, change a theme, adding different functionalities or upgrade. It is YOUR website, you want it look different than others, right. At some point, whether you like it or not, the SSG users will take the role of website designers by tangling with CSS.</description>
    </item>
    <item>
      <title>Back with Org Mode</title>
      <link>http://localhost:1313/posts/back-with-org-mode/</link>
      <pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/back-with-org-mode/</guid>
      <description>If there is one thing I&amp;rsquo;d like to commit it must be the my time mangement improvements. For that purpose, Emacs Org-mode is the ultimate tool for programmers. I can keep my notes nicely and I can track my tasks/errands all together. But all my notes are stored in my linux box, I lose access to them once I am away. From that reason, I was always on-and-off with using org-mode due to the portability.</description>
    </item>
    <item>
      <title>Xwayland Clipboard</title>
      <link>http://localhost:1313/posts/xwayland-selection/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/xwayland-selection/</guid>
      <description>I hate every single line of xwayland code I wrote, it is ugly, long and hard to maintain. Now I know very well why there is wayland in the first place, sadly a complete wayland compositor has to bring a piece of crap of X with it. I just finished the selection handling in xwayland by mimicing weston code. After finally understand that 1000 lines of confusing code, I just found out I can&amp;rsquo;t do any better.</description>
    </item>
    <item>
      <title>Jan 2021 Status Update</title>
      <link>http://localhost:1313/posts/jan-update-2021/</link>
      <pubDate>Sun, 24 Jan 2021 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/jan-update-2021/</guid>
      <description>Folks, the Magical year of 2020 is behind us, and it wasn&amp;rsquo;t a happy new chapter waiting us. Man, I still couldn&amp;rsquo;t believe, once per 100 years, why it was us who have to face the coronavirus. Now I take a good look of my 2020, I went from trying to submit a xcbcommon handling patch to weston to writing a full wayland compositor from scratch. It was not my plan!</description>
    </item>
    <item>
      <title>Working with libdrm, buffer allocation</title>
      <link>http://localhost:1313/posts/drm-backend-ii/</link>
      <pubDate>Mon, 07 Dec 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/drm-backend-ii/</guid>
      <description>In the first blog of libdrm, we went through the repainting loop using the libdrm. Now we move on to the topic of framebuffers. A framebuffer is a piece of memory (could be on main memory or on GPU) for repainting every frame. It is like a canvas, represents what you would finally see on screen. Framebuffer is already a familiar concept to rendering programmers, in OpenGL, We have GL_FRAMEBUFFER_0 for presenting the surface, additional framebuffers for roles like G-Buffer and post-processing.</description>
    </item>
    <item>
      <title>Working with libdrm, repainting timeline</title>
      <link>http://localhost:1313/posts/drm-backend/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/drm-backend/</guid>
      <description>As the taiwins project finished with X11/Wayland backend rigging. Now I am fully on the libdrm backend development, dealing with hardwares directly. This backend requires 200 percent my energy to tame the complexity.&#xA;Like other backends, libdrm also needs to provide two resources, input and output. Backends like nested wayland backend or X11 backend, the output device are the windows created by ourselves (or by the user). Meaning we can create it or destroy it as we please.</description>
    </item>
    <item>
      <title>August 2020 Status Update</title>
      <link>http://localhost:1313/posts/aug-update-2020/</link>
      <pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/aug-update-2020/</guid>
      <description>It is a sunny day, somehow I got up early this morning. The cool, chilling breath of air reminded me we are at the tail of the summer. It felt so strange, this summer was like it was never here. Hiking, go swimming, taking a trips and night outs. all those experiences for a normal summer I would do, they are all absent, hope I don&amp;rsquo;t regret too much for crunching code at home all these months.</description>
    </item>
    <item>
      <title>July 2020 Status Update</title>
      <link>http://localhost:1313/posts/july-update-2020/</link>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/july-update-2020/</guid>
      <description>July, the hottest month in Montreal every year. The heat wave rushes to you when you walk outside makes you wondering if you are in some tropical island, it sure doesn&amp;rsquo;t look like living at 45 latitde northen hemisphere. Last month was a rapid leap towards wayland objects implementations and now I just hitted the wall of xdg-shell protocol. Today I&amp;rsquo;d like to talk about what it is like to implement a wayland protocol.</description>
    </item>
    <item>
      <title>June 2020 Status Update</title>
      <link>http://localhost:1313/posts/june-update/</link>
      <pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/june-update/</guid>
      <description>Montréal is hotter than ever in this month, under the broiling sun, it was an exhausting quarantine. The first month I remeber I was feeling fortunate I got this aleatory chance for advancement of taiwins in this global pandemic, right now all I felt was the painful experience converting all the Taiwins server code away from libweston. Implementating of server side wayland objects was indeed unpleasant experience. Without libweston, I have to implement every little thing and get it right, even the basics 2D homogenous matrix operations for coordinates transformations.</description>
    </item>
    <item>
      <title>Libweston vs Wlroots</title>
      <link>http://localhost:1313/posts/weston-vs-wlroots/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/weston-vs-wlroots/</guid>
      <description>You need a wayland compositor library to create a wayland server. Wayland is a protocol, itself, cannot do much, long time ago I used to think the server-side wl_resource represents some structure you can operate on, well it turned out all you do with it is handling messages between client and server. All the logic you need to implement yourself.&#xA;There were a few attempts to wayland compositing library created. The first sucessful one is wlc.</description>
    </item>
    <item>
      <title>wl_data_device</title>
      <link>http://localhost:1313/posts/data-device/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/data-device/</guid>
      <description>wl_data_device interface in the base wayland protocol is the most complex one, in my opinion, wayland.xml explains it fairly well, but every pieces are scattered in the file, here I serialize it together, give you quick run through.&#xA;In brief, data device in wayland consists of four interfaces: The first is wl_data_device_manager, it is the global. The second is wl_data_device, can be created from wl_data_device_manager for a given seat, it is used to set selection(ctrl-c ctrl-v) and drag-n-drop.</description>
    </item>
    <item>
      <title>May 2020 Status Update</title>
      <link>http://localhost:1313/posts/may-update/</link>
      <pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/may-update/</guid>
      <description>Forcing a monthly blog update seems to be a good idea, giving myself a reason to keep paying for this Domain. Also, I don&amp;rsquo;t usually has a topic to address specifically, a monthly update can fill this role. Anyway, time passes rapidly in quarantine my friends. I hope a few years forward when I look back at this moment, I would not feel I wasted so much time. I don&amp;rsquo;t actually feel I made much progress through this month.</description>
    </item>
    <item>
      <title>Busy in quarantine</title>
      <link>http://localhost:1313/posts/busy-in-quarantine/</link>
      <pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/busy-in-quarantine/</guid>
      <description>I update this blog less frequent than once per year, which sometimes makes me question why do I keep paying for this site. Be able to update blogs is always my pursuit, unfortunately there were always more code to write. It has been more than one year, last time I was still on how to MSAA on OpenGL 4, somehow it felt like a decade ago. The peaceful developing world took an interesting turn.</description>
    </item>
    <item>
      <title>Realistic Deferred MSAA implementation</title>
      <link>http://localhost:1313/posts/deffered_msaa/</link>
      <pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/deffered_msaa/</guid>
      <description>Deferred MSAA, always has been a good problem. In the spatial anti-aliasing domain, MSAA is still the swiss-army knife, handle almost all the case.&#xA;Some other post-processing methods like nvidia&amp;rsquo;s FXAA, AMDs MLAA, or DLAA. FXAA is rather pleasing in many cases as well, especially if you are a video game developer, as long as your rasterization implementation does not screwed up. But for the case like grass rendering, fur rendering, when you have many layers of thin line, FXAA will fail you.</description>
    </item>
    <item>
      <title>The wayland project II</title>
      <link>http://localhost:1313/posts/the_wayland_project_2/</link>
      <pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/the_wayland_project_2/</guid>
      <description>The last post I laid out the story of me with wayland. Technology is fascinating isn&amp;rsquo;t it? Every once a while, there are plenty of new projects that aim to start an revolution, getting people excited. Projects like systemd, Wayland, Vulkan make us think how come we did not think of those before, they seemed perfect at the moment. Technologies always work like a rush of hot wave, our sights are limited at the moment we are in, maybe 5 years from now, even vulkan is not sexy anymore.</description>
    </item>
    <item>
      <title>The wayland project</title>
      <link>http://localhost:1313/posts/the_wayland_project/</link>
      <pubDate>Sun, 22 Jul 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/the_wayland_project/</guid>
      <description>It was a good will.&#xA;5 years ago, I read a blog about the future of linux desktop, I was using a window manager called Awesome (one of my friend introduced it to me, I was enchanted by how he opened two terminals side-by-side, one for coding and one for compiling). A voice about next generation desktop was just raised in the linux community , a group of hackers demod the weston project, where you can rotate the application windows.</description>
    </item>
    <item>
      <title>Rotations</title>
      <link>http://localhost:1313/posts/rotations/</link>
      <pubDate>Sun, 26 Nov 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/rotations/</guid>
      <description>Rotation, combined with translation and scaling, are the three affin transforms we do every day in the 3D nutshell universe. The rotation itself, however, is somehow much more complicated than the other two transform, it is one really needs a matrix representation among all three. Representations and computation of it has been developed for years. We have systems like Axis-angle representation, matrix representation, euler angles and quaternions. Despite I have known them for a long time, when I forgot, the rotation is still complicated.</description>
    </item>
    <item>
      <title>Bone Animation [part I]</title>
      <link>http://localhost:1313/posts/animation/</link>
      <pubDate>Fri, 10 Nov 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/animation/</guid>
      <description>I have been trying to create a animation system for my OpenGL Project for a long time, one of the reason is I have limited amount of time after starting the full-time job. Another problem was that, I mean, if I intend to keep it a clean project rather than just a school project, building a animation system is like a rabbit hole, 30 lines of code got me another 100 lines of work, it only leaded me deeper and deeper.</description>
    </item>
    <item>
      <title>Template Deduction for C&#43;&#43;</title>
      <link>http://localhost:1313/posts/template_deduction/</link>
      <pubDate>Fri, 04 Nov 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/template_deduction/</guid>
      <description>Template is a confusing and hard features in C++ if you want use it well, and I think it is also one of the reason which causes c++ programmers cannot understand each other. Sometimes the Deduction rule for c++ is really confusing, you don&amp;rsquo;t understand why you code doesn&amp;rsquo;t work or why it works. And Since STL heavily uses nesting Templates, both your compiler and your mind suffers from that.</description>
    </item>
    <item>
      <title>View Matrix for projection</title>
      <link>http://localhost:1313/posts/camera_matrix/</link>
      <pubDate>Mon, 31 Oct 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/camera_matrix/</guid>
      <description>The MVP Matrix $\text{Model} * \text{View} * \text{Projection}$ is the first lesson to render (the so called render is the process so that people can see it on a 2D screen )objects in Computer Graphics, which transfer a 3D object in object space into, in the end, a UV plane.&#xA;The Model matrix is simple and easy to understand, simply the translation, scale and rotation, but View matrix and Camera matrix are not obvious(although you can get it for free by single call from glm::lookAt() and glm::perspective()).</description>
    </item>
    <item>
      <title>Everything you do I can do it with a double pointer in C</title>
      <link>http://localhost:1313/posts/double_pointer_in_c/</link>
      <pubDate>Sun, 21 Aug 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/double_pointer_in_c/</guid>
      <description>It is 2016, low level coding is not needed anymore. We have programming languages like javascript and python. When people code everything with a class and related methods. But do you remember we have a programming language called C? When we had no class, templates, operator-override or implicit constructor at esthat time. You actually know what are doing with C, no magic!&#xA;I claim no expert to programming, since I only have a four-year-old programming life.</description>
    </item>
    <item>
      <title>6 years of programming</title>
      <link>http://localhost:1313/posts/six_years_programming/</link>
      <pubDate>Mon, 08 Aug 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/six_years_programming/</guid>
      <description>I have been studying in programming for 6 years, since my first day of undergrad life. I haven&amp;rsquo;t realized it has been so long, this studying life already took away most of my youth. I was a kid without knowing the toughness of life, to a young man need to worry about jobs and how to start having family.&#xA;The computer industry changed vastly in this period. There was no Cloud Computing, Machine Learning was only known in Academics.</description>
    </item>
    <item>
      <title>How to write blog generator</title>
      <link>http://localhost:1313/posts/write_sg0/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/write_sg0/</guid>
      <description>这是我的第一篇github上的博客，感觉落后时代好多年啊。因为完成自己的博客生成器不 久。所以写的第一篇博客就以生成我的博客站点的项目mkbl</description>
    </item>
  </channel>
</rss>
