<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graphics on Insaturé</title>
    <link>http://localhost:1313/tags/graphics/</link>
    <description>Recent content in Graphics on Insaturé</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Jun 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/graphics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Modular Vulkan feature and extension manager</title>
      <link>http://localhost:1313/posts/modular-vulkan-feature-manager/</link>
      <pubDate>Wed, 12 Jun 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/modular-vulkan-feature-manager/</guid>
      <description>&lt;p&gt;&#xA;Recently I&amp;#39;ve been trying to squeeze a few hours at a time from my weekends to work on my Vulkan renderer projects. Because the extremely limited time I have, any feature I want need to planned well and get implemented in a few hours or I need to break it down to do so. One of such feature I&amp;#39;ve want to implement is a modular &lt;a href=&#34;https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VkPhysicalDeviceFeatures.html&#34;&gt;Vulkan Feature&lt;/a&gt; management.&lt;/p&gt;&#xA;&lt;div id=&#34;outline-container-headline-1&#34; class=&#34;outline-3&#34;&gt;&#xA;&lt;h3 id=&#34;headline-1&#34;&gt;&#xA;Root Issue: hard-coding enabled features&#xA;&lt;/h3&gt;&#xA;&lt;div id=&#34;outline-text-headline-1&#34; class=&#34;outline-text-3&#34;&gt;&#xA;&lt;p&gt;&#xA;When creating an Vulkan device, you have a lot of options which extensions you want to enable, which feature you want to enable. This is done by inserting &lt;code&gt;features&lt;/code&gt; into the &lt;code&gt;pNext&lt;/code&gt; chain and extensions into &lt;code&gt;ppEnabledExtenionNames&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Comparing Vulkan and D3D12</title>
      <link>http://localhost:1313/posts/vulkan-vs-d3d12/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/vulkan-vs-d3d12/</guid>
      <description>&lt;p&gt;Recently I wrote the &lt;a href=&#34;https://github.com/xeechou/petitd3d12&#34;&gt;PetitD3D12&lt;/a&gt; to extend my graphics API knowledge to the land of DirectX, well I am surprised to see how similar those modern graphics APIs are. More precisely I think Vulkan is trying to stay close to D3D12 these days for be able to easily translate it. However there are also some noticeable differences, surprisingly I did not find too much &amp;ldquo;real&amp;rdquo; API comparison info, the &lt;a href=&#34;https://alain.xyz/blog/comparison-of-modern-graphics-apis&#34; title=&#34;A Comparison of Modern Graphics APIs&#34;&gt;Alain Galvan&amp;rsquo;s blog post&lt;/a&gt; are more just about grouping those API data structures together, not much you will know the difference in using them. With that being said, I am going to talk mostly in the shoes of a Vulkan developer who grabs the hand of D3D12 code to take a close look. Mainly I will cover about &lt;strong&gt;pipeline creation&lt;/strong&gt;, &lt;strong&gt;descriptor binding&lt;/strong&gt; and &lt;strong&gt;command execution&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Moving towards GPU driven</title>
      <link>http://localhost:1313/posts/moving-to-gpu-driven/</link>
      <pubDate>Sat, 13 May 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/moving-to-gpu-driven/</guid>
      <description>&lt;p&gt;We were using a traditional &lt;code&gt;for_each&lt;/code&gt; style drawing G-buffer and shadow in Vulkan, with over 2.5 million triangles, and 25,000+ objects, I started to see my GTX 1650 having hard time following it up. Although you can pre-record command buffers in Vulkan to reduce the CPU time but we will also end up with a very large command buffer to submit and potentially miss the driver optimizations with indirect draws. These days, GPUs are getting more and more powerful and complex, including tons of new features. It&amp;rsquo;s promising to draw millions or billions more triangles compared to before. The cost is that it changed the programming paradigm completely. If you want embark on new hardware, chances are you need to rewrite the rendering code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Comparing Vulkan Frameworks</title>
      <link>http://localhost:1313/posts/vulkan-frameworks/</link>
      <pubDate>Sun, 29 Jan 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/vulkan-frameworks/</guid>
      <description>&lt;p&gt;&#xA;There are indeed many people tried to implement a rendering framework on top of Vulkan to reduce the amount of code to write. But so many of them merely just create a wrapper around existing Vulkan objects, like wrapping the command buffer with a &lt;code&gt;vk::CommandBuffer::Ptr&lt;/code&gt;  and you still have to fill all the &lt;code&gt;VkObjCreateInfos&lt;/code&gt; .&lt;/p&gt;&#xA;&lt;p&gt;&#xA;The rendering framework focus on the render passes should provide a compact yet descriptive API to create render pass. Leaving the user out of the mess of managing/binding descriptors, uniform buffers. Have them focus on the shaders.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Realistic Deferred MSAA implementation</title>
      <link>http://localhost:1313/posts/deffered_msaa/</link>
      <pubDate>Mon, 03 Dec 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/deffered_msaa/</guid>
      <description>&lt;p&gt;Deferred MSAA, always has been a good problem. In the spatial anti-aliasing&#xA;domain, MSAA is still the swiss-army knife, handle almost all the case.&lt;/p&gt;&#xA;&lt;p&gt;Some other post-processing methods like nvidia&amp;rsquo;s FXAA, AMDs MLAA, or DLAA. FXAA&#xA;is rather pleasing in many cases as well, especially if&#xA;you are a video game developer, as long as your rasterization implementation&#xA;does not screwed up. But for the case like grass rendering, fur rendering, when&#xA;you have many layers of thin line, FXAA will fail you. Just like the pixels&#xA;annotated in the image below.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rotations</title>
      <link>http://localhost:1313/posts/rotations/</link>
      <pubDate>Sun, 26 Nov 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/rotations/</guid>
      <description>&lt;p&gt;Rotation, combined with translation and scaling, are the three affin transforms&#xA;we do every day in the 3D nutshell universe. The rotation itself, however, is&#xA;somehow much more complicated than the other two transform, it is one really&#xA;needs a matrix representation among all three. Representations and computation&#xA;of it has been developed for years. We have systems like &lt;strong&gt;Axis-angle&lt;/strong&gt;&#xA;representation, &lt;strong&gt;matrix representation&lt;/strong&gt;, &lt;strong&gt;euler angles&lt;/strong&gt; and &lt;strong&gt;quaternions&lt;/strong&gt;.&#xA;Despite I have known them for a long time, when I forgot, the rotation is still&#xA;complicated. Here I am writing this again, as easily understanding as possible,&#xA;for my future-self (or I can just travel through time to ask myself now).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bone Animation [part I]</title>
      <link>http://localhost:1313/posts/animation/</link>
      <pubDate>Fri, 10 Nov 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/animation/</guid>
      <description>&lt;p&gt;I have been trying to create a animation system for my &lt;a href=&#34;https://github.com/xeechou/gltutorial&#34;&gt;OpenGL&#xA;Project&lt;/a&gt; for a long time, one of the&#xA;reason is I have limited amount of time after starting the full-time job.&#xA;Another problem was that, I mean, if I intend to keep it a clean project rather&#xA;than just a school project, building a animation system is like a rabbit hole,&#xA;30 lines of code got me another 100 lines of work, it only leaded me deeper and&#xA;deeper. Well, it is a perfect opportunity for me to explain the story here. The&#xA;amount of skeletal animation that I found online, especially good blogs are less&#xA;than a dozen. Gladly, I would like to point it out here, there is a good youtube&#xA;video &lt;a href=&#34;https://www.youtube.com/watch?v=f3Cr8Yx3GGA&#34;&gt;series&lt;/a&gt; you can follow, it&#xA;is in Java, the author provided the source code for reference. Khronos has a&#xA;shader example &lt;a href=&#34;https://www.khronos.org/opengl/wiki/Skeletal_Animation&#34;&gt;here&lt;/a&gt;&#xA;and there are a few others.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
