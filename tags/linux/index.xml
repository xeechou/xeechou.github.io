<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Insaturé</title>
    <link>https://xeechou.net/tags/linux/</link>
    <description>Recent content in Linux on Insaturé</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Dec 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://xeechou.net/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Working with libdrm, buffer allocation</title>
      <link>https://xeechou.net/posts/drm-backend-ii/</link>
      <pubDate>Mon, 07 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://xeechou.net/posts/drm-backend-ii/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;%7Bfilename%7D/drm-backend.md&#34;&gt;first blog of libdrm&lt;/a&gt;, we went through the&#xA;repainting loop using the libdrm. Now we move on to the topic of&#xA;framebuffers. A framebuffer is a piece of memory (could be on main memory or on&#xA;GPU) for repainting every frame. It is like a canvas, represents what you would&#xA;finally see on screen. Framebuffer is already a familiar concept to rendering&#xA;programmers, in &lt;strong&gt;OpenGL&lt;/strong&gt;, We have &lt;code&gt;GL_FRAMEBUFFER_0&lt;/code&gt; for presenting the&#xA;surface, additional framebuffers for roles like G-Buffer and&#xA;post-processing. In GPU programming, framebuffer is also a broader concept,&#xA;&amp;ldquo;abstraction of a collection of attachments&amp;rdquo;, the underlining attachments&#xA;corresponds to actual pieces of memory we talk about here.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Working with libdrm, repainting timeline</title>
      <link>https://xeechou.net/posts/drm-backend/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://xeechou.net/posts/drm-backend/</guid>
      <description>&lt;p&gt;As the taiwins project finished with X11/Wayland backend rigging. Now I am fully&#xA;on the libdrm backend development, dealing with hardwares directly. This backend&#xA;requires 200 percent my energy to tame the complexity.&lt;/p&gt;&#xA;&lt;p&gt;Like other backends, libdrm also needs to provide two resources, &lt;em&gt;input&lt;/em&gt; and&#xA;&lt;em&gt;output&lt;/em&gt;. Backends like nested wayland backend or X11 backend, the &lt;em&gt;output&lt;/em&gt;&#xA;device are the windows created by ourselves (or by the user). Meaning we can&#xA;create it or destroy it as we please. As for libdrm, those are provided by the&#xA;OS. An &lt;em&gt;output&lt;/em&gt; in libdrm&amp;rsquo;s terminology, is called connector. We query and&#xA;change the connectors state by &lt;code&gt;drmModeGet*&lt;/code&gt; functions. Then later set the&#xA;hardware states by &lt;code&gt;drmModeSet*&lt;/code&gt; or the new atomic API. It may sound simple but&#xA;actually, for displaying images on the screen using the &lt;em&gt;libdrm&lt;/em&gt; mechanism, it&#xA;takes quite a few components, working together, to achieve the goal. We uses&#xA;&lt;code&gt;drmMode*&lt;/code&gt; routines for&#xA;&lt;a href=&#34;https://01.org/linuxgraphics/gfx-docs/drm/gpu/drm-kms.html&#34;&gt;kernel-modesetting&lt;/a&gt;;&#xA;libgbm for framebuffer allocation; OpenGL or Vulkan for rendering. If done&#xA;right, you would get tear-free images on your screen constant refresh rate. But&#xA;should anything goes wrong, you probably end up with a black screen.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
