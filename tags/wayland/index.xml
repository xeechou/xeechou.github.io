<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wayland on Insaturé</title>
    <link>https://xeechou.net/tags/wayland/</link>
    <description>Recent content in Wayland on Insaturé</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Aug 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://xeechou.net/tags/wayland/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Wayland client side window decorations through libdecor</title>
      <link>https://xeechou.net/posts/libdecor/</link>
      <pubDate>Thu, 17 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://xeechou.net/posts/libdecor/</guid>
      <description>&lt;p&gt;I have been away from wayland system for a while because of work, but I still remember back in the day the pain to manage the window frame (as known as decorations) in wayland system. Surprisingly quite a lot of server work shifted to client side to manage, eg, you need to implement key repeat event in the client applications.&lt;/p&gt;&#xA;&lt;p&gt;There are &lt;strong&gt;two&lt;/strong&gt; ways right now to do the client decorations.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Xwayland Clipboard</title>
      <link>https://xeechou.net/posts/xwayland-selection/</link>
      <pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate>
      <guid>https://xeechou.net/posts/xwayland-selection/</guid>
      <description>&lt;p&gt;I hate every single line of xwayland code I wrote, it is ugly, long and hard to&#xA;maintain. Now I know very well why there is wayland in the first place, sadly a&#xA;complete wayland compositor has to bring a piece of crap of X with it. I just&#xA;finished the selection handling in xwayland by mimicing weston code. After&#xA;finally understand that 1000 lines of confusing code, I just found out I can&amp;rsquo;t&#xA;do any better.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Working with libdrm, buffer allocation</title>
      <link>https://xeechou.net/posts/drm-backend-ii/</link>
      <pubDate>Mon, 07 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://xeechou.net/posts/drm-backend-ii/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;%7Bfilename%7D/drm-backend.md&#34;&gt;first blog of libdrm&lt;/a&gt;, we went through the&#xA;repainting loop using the libdrm. Now we move on to the topic of&#xA;framebuffers. A framebuffer is a piece of memory (could be on main memory or on&#xA;GPU) for repainting every frame. It is like a canvas, represents what you would&#xA;finally see on screen. Framebuffer is already a familiar concept to rendering&#xA;programmers, in &lt;strong&gt;OpenGL&lt;/strong&gt;, We have &lt;code&gt;GL_FRAMEBUFFER_0&lt;/code&gt; for presenting the&#xA;surface, additional framebuffers for roles like G-Buffer and&#xA;post-processing. In GPU programming, framebuffer is also a broader concept,&#xA;&amp;ldquo;abstraction of a collection of attachments&amp;rdquo;, the underlining attachments&#xA;corresponds to actual pieces of memory we talk about here.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Libweston vs Wlroots</title>
      <link>https://xeechou.net/posts/weston-vs-wlroots/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://xeechou.net/posts/weston-vs-wlroots/</guid>
      <description>&lt;p&gt;You need a wayland compositor library to create a wayland server. Wayland is a&#xA;protocol, itself, cannot do much, long time ago I used to think the server-side&#xA;&lt;code&gt;wl_resource&lt;/code&gt; represents some structure you can operate on, well it turned out&#xA;all you do with it is handling messages between client and server. All the logic&#xA;you need to implement yourself.&lt;/p&gt;&#xA;&lt;p&gt;There were a few attempts to wayland compositing library created. The first&#xA;sucessful one is &lt;a href=&#34;https://github.com/Cloudef/wlc&#34;&gt;wlc&lt;/a&gt;. I think its existence is&#xA;that &lt;a href=&#34;https://github.com/wayland-project/weston&#34;&gt;weston&lt;/a&gt; (the twin of the&#xA;wayland project, now maintained by Pekka Paalanen). was a monolith application&#xA;for a long time. Weston looks pretty and quite fast and beautiful but not very&#xA;useful to anyone else. The developers maybe realized that they want to get more&#xA;people to use weston, so they managed to strip &lt;strong&gt;libweston&lt;/strong&gt; out of weston&#xA;itself. It was a good attempt, although I doubt their true intention was to&#xA;creating a reusable compositing library. Nonetheless, to some extent, it helped&#xA;the birth of the third library by Drew Devault, the&#xA;&lt;a href=&#34;https://github.com/swaywm/wlroots&#34;&gt;wlroots&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>wl_data_device</title>
      <link>https://xeechou.net/posts/data-device/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      <guid>https://xeechou.net/posts/data-device/</guid>
      <description>&lt;p&gt;&lt;code&gt;wl_data_device&lt;/code&gt; interface in the base wayland protocol is the most complex one,&#xA;in my opinion, &lt;em&gt;wayland.xml&lt;/em&gt; explains it fairly well, but every pieces are&#xA;scattered in the file, here I serialize it together, give you quick run through.&lt;/p&gt;&#xA;&lt;p&gt;In brief, data device in wayland consists of four interfaces: The first is&#xA;&lt;code&gt;wl_data_device_manager&lt;/code&gt;, it is the global. The second is &lt;code&gt;wl_data_device&lt;/code&gt;,&#xA;can be created from &lt;code&gt;wl_data_device_manager&lt;/code&gt; for a given seat, it is used to&#xA;set selection(ctrl-c ctrl-v) and drag-n-drop. The 3rd is &lt;code&gt;wl_data_source&lt;/code&gt;,&#xA;also created from &lt;code&gt;wl_data_device_manager&lt;/code&gt;, this source will be either a&#xA;selection source or drag-n-drop source. The last is &lt;code&gt;wl_data_offer&lt;/code&gt;, which is&#xA;used for copying data from &lt;code&gt;wl_data_source&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The wayland project II</title>
      <link>https://xeechou.net/posts/the_wayland_project_2/</link>
      <pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://xeechou.net/posts/the_wayland_project_2/</guid>
      <description>&lt;p&gt;The last &lt;a href=&#34;%7Bfilename%7D/the_wayland_project.md&#34;&gt;post&lt;/a&gt; I laid out the story of me&#xA;with wayland. Technology is fascinating isn&amp;rsquo;t it? Every once a while, there are&#xA;plenty of new projects that aim to start an revolution, getting people&#xA;excited. Projects like &lt;strong&gt;systemd&lt;/strong&gt;, &lt;strong&gt;Wayland&lt;/strong&gt;, &lt;strong&gt;Vulkan&lt;/strong&gt; make us think how&#xA;come we did not think of those before, they seemed perfect at the&#xA;moment. Technologies always work like a rush of hot wave, our sights are limited&#xA;at the moment we are in, maybe 5 years from now, even &lt;strong&gt;vulkan&lt;/strong&gt; is not sexy&#xA;anymore. For ten years, community has been urging everyone to jump on the boat&#xA;of wayland. Some major platform adopted it, just there is no money in it. Major&#xA;platforms like &lt;strong&gt;GNOME&lt;/strong&gt; and &lt;strong&gt;KDE&lt;/strong&gt; are not even mature yet, KDE developers&#xA;also worries about the future of the wayland, will it last 30 years like &lt;strong&gt;X&#xA;window&lt;/strong&gt;?&lt;/p&gt;</description>
    </item>
    <item>
      <title>The wayland project</title>
      <link>https://xeechou.net/posts/the_wayland_project/</link>
      <pubDate>Sun, 22 Jul 2018 00:00:00 +0000</pubDate>
      <guid>https://xeechou.net/posts/the_wayland_project/</guid>
      <description>&lt;p&gt;It was a good will.&lt;/p&gt;&#xA;&lt;p&gt;5 years ago, I read a blog about the future of linux desktop, I was using a&#xA;window manager called &lt;code&gt;Awesome&lt;/code&gt; (one of my friend introduced it to me, I was&#xA;enchanted by how he opened two terminals side-by-side, one for coding and one&#xA;for compiling). A voice about next generation desktop was just raised in the&#xA;linux community , a group of hackers demod the &lt;code&gt;weston&lt;/code&gt; project, where you can&#xA;rotate the application windows. They also pointed out the existing problems in&#xA;the x server architecture(basically it is too old, let us just replace it). It&#xA;is cumbersome, too many components, easily dead after package upgrade.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
